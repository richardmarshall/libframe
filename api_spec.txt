We need to spc out the interface for the library before moving on too much with
development.

Frame descriptor structure.
struct frame {
	size_t tsize;
	size_t size;
	struct pdu *pdus;
	void *data;
	void *payload;
};

Generic PDU struct for all layers
struct pdu {
	void *data;
	short type;
	size_t size;
	struct pdu *next;
};

Generic Create PDU
struct pdu *create_pdu(struct frame *framep, size_t size, short type);

Specific pdu creation functions for each protocol
struct pdu *<PROTOCOL>_create(struct frame *framep, <PROTOCOL DEPENDENT ARGUEMNTS>);

Example for ethernetII:
header_t *etherii_create(struct frame *framep, char *dst, char *src, short etype);

To simplify application development wrapper functions for each protocols header
creation functions that perform input manipulation should be created.
struct pdu *<PROTONAME>_simple_create(struct frame *framep, <PROTOCOL DEPENDENT ARGUEMNTS>);

For example ethernetII:
struct pdu *etherii_simple_create(struct frame *framep, char *dst, char *src, short etype);
Where dst and src are mac addresses in string format ie: "00:00:00:00:00:00" to
be converted. 

Complete usage example for ip arp on etherII:

struct frame *frame = NULL;

/* 
 * Skipping definition/assignment of protocol specific arguments 
 * NOTE: This example is also ignoreing the return values of the functions
 * which should be used to make sure each one returns a valid result and
 * perform cleanup on failure.
 */

/* Create Frame */
frame = create_frame(1500);

/* Create arp packet */
arp_ie_simple_create(frame, oper, sha, spa, tha, tpa);

/* Setup ethernetII framing */
etherii_create(frame, dst, src, etype);

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! THE FOLLOWING SPEC IS MISSING SEVERAL PROTOCOLS !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
PROTOCOL APIS:

Common --

typedef unsigned char  u8_t;
typedef unsigned short u16_t;
typedef unsiVgned int   u32_t;

#define ETYPE_IP    0x0800
#define ETYPE_ARP   0x0806
#define ETYPE_DOT1Q 0x8100
#define ETYPE_QINQ  0x9100

802.3 --

/* 802.3 shares the same in frame structure as EtherII so see that spec for the layout */
struct pdu *ether8023_create(struct frame *fp, u8_t *dst, u8_t *src, u16_t len);
struct pdu *ether8023_simple_create(struct frame *fp, u8_t *dst, u8_t *src, u16_t len);

802.2LLC --

struct ether8022llc_header {
	u8_t dsap;
	u8_t ssap;
	u8_t cfield;
	u8_t ocode[3];
	u16_t pid;
}__attribute__((__packed__));
typedef struct ether8022llc_header ether8022llc_header_t;

struct pud *ether8022llc_create(struct frame *fp, u8_t dsap, u8_t ssap, u8_t cfield, u8_t *ocode, u16_t pid);

EthernetII --

struct etherii_header {
	u8_t  dst[6];
	u8_t  src[6];
	u16_t etype;
}__attribute__((__packed__));
typedef struct etherii_header etherii_header_t;

struct pud *etherii_create(struct frame *fp, u8_t *dst, u8_t *src, u16_t etype);
struct pdu *etherii_simple_create(struct frame *fp, u8_t *dst, u8_t *src, u16_t etype);

ARP --

#define ARP_OPER_QUERY   1
#define ARP_OPER_REPLY   2
#define ARP_OPER_RQUERY  3
#define ARP_OPER_RREPLY  4
#define ARP_OPER_IQUERY  8
#define ARP_OPER_IREPLY  9
#define ARP_OPER_NAK     10

/* Probably the only version of this we will create */
struct arp_ip_ether_header {
	u16_t htype;
	u16_t ptype;
	u8_t  hlen;
	u8_t  plen;
	u16_t oper;
	u8_t  sha[6];
	u8_t  spa[4];
	u8_t  tha[6];
	u8_t  tpa[4];
} __attribute__((__packed__));
typedef struct arp_ip_ether_header arp_ip_ether_header_t;

struct pdu *arp_create(struct frame *fp, u16_t htype, u16_t ptype, u8_t hsize, u8_t psize,
				u16_t oper, u8_t *sha, u8_t *spa, u8_t *tha, u8_t *tpa );
struct pdu *arp_ie_simple_create(struct frame *fp, u16_t oper, u8_t *sha, u8_t *spa,
		u8_t *sha, u8_t *spa ); /* simple fn for IP/Ethernet arp the most common */

