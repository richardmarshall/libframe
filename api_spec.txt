We need to spc out the interface for the library before moving on too much with development.

Generic PDU struct for all layers
struct pdu {
	char *data;
	int size;
};
typedef struct pdu pdu_t;

Generic Header struct for all layers
struct header {
	void *header;
	int size;
};
typedef struct header header_t;

Generic Create PDU for all layers
pdu_t *pdu_create( header_t *header, pdu_t *payload );

Specific header_create functions for each protocol
header_t *<PROTONAME>_header_create( <PROTOCOL DEPENDENT ARGUMENTS> );

Example for ethernetII:
header_t *etherii_header_create( char *dst, char *src, short etype );

For protocols like arp that do not really have headers with a payload. Wrapper functions around the header/pdu creation would make things less confusing.
pdu_t *<PROTONAME>_create( <PROTOCOL DEPENDENT ARGUMENTS> );

Example for ARP:
pdu_t *arp_create( short htype, short ptype, char hsize, char psize, short oper, char *sha, char *spa, char *tha, char *tpa );

To simplify application development wrapper functions for each protocols header creation functions that perform input manipulation should be created.
header_t *<PROTONAME>_simple_header_create( <PROTOCOL DEPENDENT ARGUEMNTS> );

For example ethernetII:
header_t *etherii_simple_header_create( char *dst, char *src, short etype );
Where dst and src are mac addresses in string format ie: "00:00:00:00:00:00" to be converted. 

Complete usage example for ip arp on etherII:

header_t *etherii_header = NULL;
pdu_t *etherii_frame = NULL;
pdu_t *arp_packet = NULL;

/* Skipping definitionassignment of protocol specific arguments */

/* Create arp packet with NULL payload */
apr_packet = arp_ie_simple_create( oper, sha, spa, tha, tpa );

/* Setup ethernetII frame with payload of arp packet */
etherii_header = etherii_header_create( dst, src, etype );
etherii_frame = pdu_create( header, arp_packet );

PROTOCOL APIS:

EthernetII --

struct etherii_header {
	char dst[6];
	char src[6];
	short etype;
}__attribute__((__packed__));
typedef struct etherii_header etherii_header_t;

header_t *etherii_header_create( char *dst, char *src, short etype );
header_t *etherii_simple_header_create( char *dst, char *src, short etype );

ARP --

/* Probably the only version of this we will create */
struct arp_ip_ether_header {
	short htype;
	short  ptype;
	char hlen;
	char plen;
	short oper;
	char sha[6];
	char spa[4];
	char tha[6];
	char tpa[4];
} __attribute__((__packed__));
typedef struct arp_ip_ether_header arp_ip_ether_header_t;

header_t *arp_header_create( short htype, short ptype, char hsize, char psize, short oper, char *sha, char *spa, char *tha, char *tpa );
pdu_t *arp_create( short htype, short ptype, char hsize, char psize, short oper, char *sha, char *spa, char *tha, char *tpa );
pdu_t *arp_ie_simple_create( short oper, char *sha, char *spa, char *sha, char *spa ); /* simple fn for IP/Ethernet arp the most common */

